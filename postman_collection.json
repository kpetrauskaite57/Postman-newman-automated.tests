{
	"info": {
		"_postman_id": "0faa19b6-e88c-4957-b1d1-409953a0beae",
		"name": "Todo App API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "36278464"
	},
	"item": [
		{
			"name": "Create a New Todo",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const baseTodo = 'Todo';\r",
							"const uniqueTitle = baseTodo + Date.now();\r",
							"\r",
							"pm.collectionVariables.set('uniqueTitle', uniqueTitle);\r",
							"pm.collectionVariables.set('uniqueDescription', uniqueTitle + \" miestass\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is under 300ms\", () => {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
							"});\r",
							"\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Response has id\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"id\").to.be.a('number').and.to.be.at.least(0);;\r",
							"    pm.collectionVariables.set(\"createdId\", jsonData.id);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Created todo exists and has correct title and description\", function () {\r",
							"    pm.expect(jsonData.title).to.eql(pm.collectionVariables.get(\"uniqueTitle\"));\r",
							"    pm.expect(jsonData.description).to.eql(pm.collectionVariables.get(\"uniqueDescription\"));\r",
							"    pm.collectionVariables.set(\"title\", jsonData.title);\r",
							"    pm.collectionVariables.set(\"description\", jsonData.description);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"title\": \"{{uniqueTitle}}\",\r\n  \"description\": \"{{uniqueDescription}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/todos",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"todos"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Todo by Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('Response is under 500ms', () => {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"console.log(\"Title: \", pm.collectionVariables.get('title'));\r",
							"console.log(\"Description: \", pm.collectionVariables.get('description'));\r",
							"\r",
							"pm.test(\"Created todo exists in get by id\", () => {\r",
							"    let jsonData = pm.response.json();\r",
							"  pm.expect(jsonData.id).to.be.a('number').and.to.be.at.least(0);\r",
							"    pm.expect(jsonData.id).to.eql(pm.collectionVariables.get('createdId'));\r",
							"      pm.expect(jsonData.title).to.be.a('string').and.have.lengthOf.at.least(1);\r",
							"    pm.expect(jsonData.title).to.eql(pm.collectionVariables.get('title'));\r",
							"  pm.expect(jsonData.description).to.be.a('string').and.have.lengthOf.at.least(1);\r",
							"    pm.expect(jsonData.description).to.eql(pm.collectionVariables.get('description'));\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/todos/{{createdId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"todos",
						"{{createdId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All Todos",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is under 500ms\", () => {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"pm.test(\"Todos exist in array and have correct data\", () => {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an('array').that.is.not.empty;\r",
							"    jsonData.forEach(item => {\r",
							"           pm.expect(item).to.have.property('id');\r",
							"        pm.expect(item.id).to.be.a('number').and.to.be.at.least(0);\r",
							"        pm.expect(item).to.have.property('title');\r",
							"        pm.expect(item.title).to.be.a('string').and.have.lengthOf.at.least(1);\r",
							"   pm.expect(item).to.have.property('description');\r",
							"        pm.expect(item.description).to.be.a('string').and.have.lengthOf.at.least(1);\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/todos",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"todos"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Todo by ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"\r",
							"pm.test(\"Todo was actually updated\", function () {\r",
							"    pm.expect(jsonData.id).to.eql(pm.collectionVariables.get('createdId'));\r",
							"\r",
							"    pm.expect(jsonData.title).to.be.a('string').and.have.lengthOf.at.least(1);\r",
							"    pm.expect(jsonData.title).to.eql(pm.collectionVariables.get('newTitle'));\r",
							"\r",
							"    pm.expect(jsonData.description).to.be.a('string').and.have.lengthOf.at.least(1);\r",
							"    pm.expect(jsonData.description).to.eql(pm.collectionVariables.get('newDescription'));\r",
							"   \r",
							"    pm.expect(jsonData.title).to.not.eql(pm.collectionVariables.get('title'));\r",
							"    pm.expect(jsonData.description).to.not.eql(pm.collectionVariables.get('description'));\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set('newTitle', 'New Todo Title');\r",
							"pm.collectionVariables.set('newDescription', 'New Todo Description');\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \"{{newTitle}}\",\r\n    \"description\": \"{{newDescription}}\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/todos/{{createdId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"todos",
						"{{createdId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Todo was updated",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Todo was actually updated\", function () {\r",
							"    pm.expect(jsonData).to.have.property('id');\r",
							"    pm.expect(jsonData.id).to.eql(pm.collectionVariables.get('createdId'));\r",
							"\r",
							"\r",
							"    pm.expect(jsonData.title).to.be.a('string').and.have.lengthOf.at.least(1);\r",
							"    pm.expect(jsonData.title).to.eql(pm.collectionVariables.get('newTitle'));\r",
							"\r",
							"    pm.expect(jsonData.description).to.be.a('string').and.have.lengthOf.at.least(1);\r",
							"    pm.expect(jsonData.description).to.eql(pm.collectionVariables.get('newDescription'));\r",
							"\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/todos/{{createdId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"todos",
						"{{createdId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All Todos",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is under 500ms\", () => {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Todos list is an array\", function () {\r",
							"    pm.expect(jsonData).to.be.an('array');\r",
							"});\r",
							"\r",
							"pm.test(\"Updated Todo is in the list\", function () {\r",
							"    // Find the updated todo item in the list\r",
							"    let updatedTodo = jsonData.find(todo => todo.id === pm.collectionVariables.get('createdId'));\r",
							"    \r",
							"    // Check that the updated todo exists\r",
							"    pm.expect(updatedTodo).to.not.be.undefined;\r",
							"\r",
							"    // Verify the updated fields\r",
							"    pm.expect(updatedTodo.title).to.be.a('string').and.have.lengthOf.at.least(1);\r",
							"    pm.expect(updatedTodo.title).to.eql(pm.collectionVariables.get('newTitle'));\r",
							"\r",
							"    pm.expect(updatedTodo.description).to.be.a('string').and.have.lengthOf.at.least(1);\r",
							"    pm.expect(updatedTodo.description).to.eql(pm.collectionVariables.get('newDescription'));\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/todos",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"todos"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Todo by ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('response is under 500ms', () => \r",
							"{\r",
							" pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is the deleted todo\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an('array').that.is.not.empty;\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/todos/{{createdId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"todos",
						"{{createdId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Deleted Todo",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test('Response is under 500ms', () => {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body is empty\", function () {\r",
							"    pm.expect(pm.response.text('Todo not found'));\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/todos/{{createdId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"todos",
						"{{createdId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All Todos",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Todos list is an array\", function () {\r",
							"    pm.expect(jsonData).to.be.an('array');\r",
							"});\r",
							"\r",
							"pm.test(\"Deleted Todo is not in the list\", function () {\r",
							"    // Check that the deleted todo is not in the list\r",
							"    let deletedTodo = jsonData.find(todo => todo.id === pm.collectionVariables.get('createdId'));\r",
							"\r",
							"    // Verify that the todo with the deleted ID does not exist\r",
							"    pm.expect(deletedTodo).to.be.undefined;\r",
							"});\r",
							"\r",
							"pm.test('Response is under 500ms', () => {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/todos",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"todos"
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "uniqueTitle",
			"value": ""
		},
		{
			"key": "uniqueDescription",
			"value": ""
		},
		{
			"key": "createdId",
			"value": ""
		},
		{
			"key": "updatedTitle",
			"value": ""
		},
		{
			"key": "updatedDescription",
			"value": ""
		},
		{
			"key": "title",
			"value": ""
		},
		{
			"key": "description",
			"value": ""
		},
		{
			"key": "newTitle",
			"value": ""
		},
		{
			"key": "newDescription",
			"value": ""
		}
	]
}